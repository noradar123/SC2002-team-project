package entity;

import java.io.FileWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import entity.CareerCenterStaff;
import entity.Internship;


public class Report {
    private String reportID;
    private CareerCenterStaff generatedBy;
    private LocalDate generatedDate;
    private List<Internship> includedOpportunities;

    public Report(String reportID, CareerCenterStaff generatedBy, LocalDate generatedDate, List<Internship> includedOpportunities) {
        this.reportID = reportID;
        this.generatedBy = generatedBy;
        this.generatedDate = generatedDate;
        this.includedOpportunities = new ArrayList<>(includedOpportunities);
    }

    public String getReportID() {
        return reportID;
    }

    public CareerCenterStaff getGeneratedBy() {
        return generatedBy;
    }

    public LocalDate getGeneratedDate() {
        return generatedDate;
    }

    public List<Internship> getIncludedOpportunities() {
        return new ArrayList<>(includedOpportunities);
    }

    public void displaySummary() {
        System.out.println("=== INTERNSHIP REPORT SUMMARY ===");
        System.out.println("Report ID: " + reportID);
        System.out.println("Generated by: " + generatedBy.getName());
        System.out.println("Date: " + generatedDate);
        System.out.println("Total Opportunities: " + includedOpportunities.size());

        long pending = includedOpportunities.stream().filter(i -> i.getStatus().name().equals("PENDING")).count();
        long approved = includedOpportunities.stream().filter(i -> i.getStatus().name().equals("APPROVED")).count();
        long rejected = includedOpportunities.stream().filter(i -> i.getStatus().name().equals("REJECTED")).count();
        long filled = includedOpportunities.stream().filter(i -> i.getStatus().name().equals("FILLED")).count();

        System.out.println("\nStatus Breakdown:");
        System.out.println("Pending: " + pending);
        System.out.println("Approved: " + approved);
        System.out.println("Rejected: " + rejected);
        System.out.println("Filled: " + filled);
    }

    public Map<String, Object> getStatistics() {
        Map<String, Object> stats = new HashMap<>();
        int total = includedOpportunities.size();

        long pending = includedOpportunities.stream().filter(i -> i.getStatus().name().equals("PENDING")).count();
        long approved = includedOpportunities.stream().filter(i -> i.getStatus().name().equals("APPROVED")).count();
        long rejected = includedOpportunities.stream().filter(i -> i.getStatus().name().equals("REJECTED")).count();
        long filled = includedOpportunities.stream().filter(i -> i.getStatus().name().equals("FILLED")).count();

        stats.put("Total Opportunities", total);
        stats.put("Pending", pending);
        stats.put("Approved", approved);
        stats.put("Rejected", rejected);
        stats.put("Filled", filled);

        if (total > 0) {
            stats.put("Approved %", (approved * 100.0 / total));
            stats.put("Rejected %", (rejected * 100.0 / total));
            stats.put("Filled %", (filled * 100.0 / total));
        }

        return stats;
    }

    public boolean exportToFile(String filePath) {
        try (FileWriter writer = new FileWriter(filePath)) {
            writer.write("=== Internship Report ===\n");
            writer.write("Report ID: " + reportID + "\n");
            writer.write("Generated by: " + generatedBy.getName() + "\n");
            writer.write("Date: " + generatedDate + "\n\n");

            for (Internship i : includedOpportunities) {
                writer.write(i.toString() + "\n");
                writer.write("Company: " + i.getCompany() + "\n");
                writer.write("Status: " + i.getStatus() + "\n");
                writer.write("-----------------------------\n");
            }

            writer.write("\nSummary Statistics:\n");
            Map<String, Object> stats = getStatistics();
            for (Map.Entry<String, Object> entry : stats.entrySet()) {
                writer.write(entry.getKey() + ": " + entry.getValue() + "\n");
            }

            writer.flush();
            return true;
        } catch (IOException e) {
            System.err.println("Error exporting report: " + e.getMessage());
            return false;
        }
    }
}


